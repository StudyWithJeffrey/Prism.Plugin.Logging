{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Logging \u00b6 It is important to understand that Prism is not considered to provide any sort of logger out of the box. The ILoggerFacade interface is provided as a legacy interface and does provide some debug output primarily for Prism.WPF apps, and is not really used by Prism.Forms. There are however several logging implementations provided as a Plugin for Prism which work with any Prism application. Support \u00b6 This project is maintained by Dan Siegel. If this project or others maintained by Dan have helped you please help support the project by sponsoring Dan on GitHub! NuGet \u00b6 Package NuGet Sponsor Connect Prism.Plugin.Logging.Abstractions Prism.Plugin.Logging.Common Prism.Plugin.Logging.AppCenter Prism.Plugin.Logging.AppInsights Prism.Plugin.Logging.Graylog Prism.Plugin.Logging.Loggly Prism.Plugin.Logging.Syslog","title":"Getting Started"},{"location":"#logging","text":"It is important to understand that Prism is not considered to provide any sort of logger out of the box. The ILoggerFacade interface is provided as a legacy interface and does provide some debug output primarily for Prism.WPF apps, and is not really used by Prism.Forms. There are however several logging implementations provided as a Plugin for Prism which work with any Prism application.","title":"Logging"},{"location":"#support","text":"This project is maintained by Dan Siegel. If this project or others maintained by Dan have helped you please help support the project by sponsoring Dan on GitHub!","title":"Support"},{"location":"#nuget","text":"Package NuGet Sponsor Connect Prism.Plugin.Logging.Abstractions Prism.Plugin.Logging.Common Prism.Plugin.Logging.AppCenter Prism.Plugin.Logging.AppInsights Prism.Plugin.Logging.Graylog Prism.Plugin.Logging.Loggly Prism.Plugin.Logging.Syslog","title":"NuGet"},{"location":"abstractions/","text":"There are several interfaces provided by Prism.Plugin.Logging in the Abstractions package. While you can register any of the given services, most applications would simply register an make use of the ILogger interface. This gives you the greatest flexibility to determine what type of logging you would like to do. You may notice that these interfaces provide a more modern context and largely match the API's provided by App Center for collecting Analytics and Tracking Errors within your application. public interface IAnalyticsService { void TrackEvent ( string name , IDictionary < string , string > properties ); } public interface ICrashesService { void Report ( Exception ex , IDictionary < string , string > properties ); } public interface ILogger : ILoggerFacade , IAnalyticsService , ICrashesService { void Log ( string message , IDictionary < string , string > properties ); } Note Base implementations are also provided in the Abstractions package for Null Logging and Console Logging.","title":"Abstractions"},{"location":"aggregate-logger/","text":"Aggregate Logger \u00b6 There may be times in which you want to log to multiple outputs. For this time an AggregateLogger has been provided in the Abstractions package. You can set it up as follows: private AggregateLogger _logger ; protected override void OnInitialized () { AppCenter . Start ( \"{your application secrets}\" , typeof ( Analytics ), typeof ( Crashes )); _logger . AddLoggers ( // NOTE: None of these need to be explicitly registered as you // are resolving concrete types Container . Resolve < SyslogLogger >(), Container . Resolve < ConsoleLoggingService >(), Container . Resolve < AppCenterLogger >() ); } protected override void RegisterTypes ( IContainerRegistry containerRegistry ) { _logger = new AggregateLogger (); containerRegistry . RegisterInstance < ILogger >( _logger ); containerRegistry . Register < ISyslogOptions , MySyslogOptions >(); }","title":"Aggregate Logger"},{"location":"aggregate-logger/#aggregate-logger","text":"There may be times in which you want to log to multiple outputs. For this time an AggregateLogger has been provided in the Abstractions package. You can set it up as follows: private AggregateLogger _logger ; protected override void OnInitialized () { AppCenter . Start ( \"{your application secrets}\" , typeof ( Analytics ), typeof ( Crashes )); _logger . AddLoggers ( // NOTE: None of these need to be explicitly registered as you // are resolving concrete types Container . Resolve < SyslogLogger >(), Container . Resolve < ConsoleLoggingService >(), Container . Resolve < AppCenterLogger >() ); } protected override void RegisterTypes ( IContainerRegistry containerRegistry ) { _logger = new AggregateLogger (); containerRegistry . RegisterInstance < ILogger >( _logger ); containerRegistry . Register < ISyslogOptions , MySyslogOptions >(); }","title":"Aggregate Logger"},{"location":"samples/","text":"TODO","title":"Samples"},{"location":"appcenter/","text":"App Center \u00b6 App Center is a very popular and FREE platform provided by Microsoft for tracking Analytics about your users and collecting crash analytics. With support for most Xamarin applications this is a very good platform to use when developing Prism.Forms applications. For more information see the App Center website. Setup \u00b6 The App Center Logger requires no explicit setup in terms of registering additional configuration classes. You will however need to be sure to start the App Center Analytics and Crashes using their standard API's. AppCenter . Start ( \"{your app secret}\" , typeof ( Analytics ), typeof ( Crashes ));","title":"App Center"},{"location":"appcenter/#app-center","text":"App Center is a very popular and FREE platform provided by Microsoft for tracking Analytics about your users and collecting crash analytics. With support for most Xamarin applications this is a very good platform to use when developing Prism.Forms applications. For more information see the App Center website.","title":"App Center"},{"location":"appcenter/#setup","text":"The App Center Logger requires no explicit setup in terms of registering additional configuration classes. You will however need to be sure to start the App Center Analytics and Crashes using their standard API's. AppCenter . Start ( \"{your app secret}\" , typeof ( Analytics ), typeof ( Crashes ));","title":"Setup"},{"location":"appinsights/","text":"Application Insights \u00b6 What is Application Insights Application Insights, a feature of Azure Monitor, is an extensible Application Performance Management (APM) service for web developers on multiple platforms. Use it to monitor your live web application. It will automatically detect performance anomalies. It includes powerful analytics tools to help you diagnose issues and to understand what users actually do with your app. It's designed to help you continuously improve performance and usability. Info For more information see the Application Insights documentation. Setup \u00b6 In order to get started with Application Insights you will need to be sure to provide an implementation of the IApplicationInsightsOptions to provide the logger with your InstrumentationKey and any UserTraits which you want Application Insights to track. This may include properties such as information on what type of device, OS, etc that your user is using your application on. public interface IApplicationInsightsOptions { string InstrumentationKey { get ; } IDictionary < string , string > UserTraits { get ; } }","title":"Application Insights"},{"location":"appinsights/#application-insights","text":"What is Application Insights Application Insights, a feature of Azure Monitor, is an extensible Application Performance Management (APM) service for web developers on multiple platforms. Use it to monitor your live web application. It will automatically detect performance anomalies. It includes powerful analytics tools to help you diagnose issues and to understand what users actually do with your app. It's designed to help you continuously improve performance and usability. Info For more information see the Application Insights documentation.","title":"Application Insights"},{"location":"appinsights/#setup","text":"In order to get started with Application Insights you will need to be sure to provide an implementation of the IApplicationInsightsOptions to provide the logger with your InstrumentationKey and any UserTraits which you want Application Insights to track. This may include properties such as information on what type of device, OS, etc that your user is using your application on. public interface IApplicationInsightsOptions { string InstrumentationKey { get ; } IDictionary < string , string > UserTraits { get ; } }","title":"Setup"},{"location":"graylog/","text":"Graylog \u00b6 Graylog is a leading centralized log management solution built to open standards for capturing, storing, and enabling real-time analysis of terabytes of machine data. This offers a better user experience by making analysis ridiculously fast, efficient, cost-effective, and flexible. Graylog is offered both as an Open Source and Enterprise solution. For more information about Graylog be sure to check out their website and docs. Info Graylog support is offered using the Graylog Extended Logging Format (GELF) although you may also elect to use the Syslog Logger to log to a Graylog Server Setup \u00b6 The setup for Graylog is very easy as you simply need to provide a Uri for where to send the logs to. public interface IGelfOptions { Uri Host { get ; } } Note Logs are sent via a HttpClient asynchronously in the background. The logging plugin currently does not handle scenarios where you may lose connection. Any logs that are sent while offline may be lost.","title":"Graylog"},{"location":"graylog/#graylog","text":"Graylog is a leading centralized log management solution built to open standards for capturing, storing, and enabling real-time analysis of terabytes of machine data. This offers a better user experience by making analysis ridiculously fast, efficient, cost-effective, and flexible. Graylog is offered both as an Open Source and Enterprise solution. For more information about Graylog be sure to check out their website and docs. Info Graylog support is offered using the Graylog Extended Logging Format (GELF) although you may also elect to use the Syslog Logger to log to a Graylog Server","title":"Graylog"},{"location":"graylog/#setup","text":"The setup for Graylog is very easy as you simply need to provide a Uri for where to send the logs to. public interface IGelfOptions { Uri Host { get ; } } Note Logs are sent via a HttpClient asynchronously in the background. The logging plugin currently does not handle scenarios where you may lose connection. Any logs that are sent while offline may be lost.","title":"Setup"},{"location":"loggly/","text":"Loggly \u00b6 TODO Loggly Syslog \u00b6 Loggly Http \u00b6","title":"Loggly"},{"location":"loggly/#loggly","text":"TODO","title":"Loggly"},{"location":"loggly/#loggly-syslog","text":"","title":"Loggly Syslog"},{"location":"loggly/#loggly-http","text":"","title":"Loggly Http"},{"location":"socket/","text":"Socket Logger \u00b6 TODO","title":"Socket Logger"},{"location":"socket/#socket-logger","text":"TODO","title":"Socket Logger"},{"location":"socket/sample-listener/","text":"","title":"Sample listener"},{"location":"syslog/","text":"Syslog \u00b6 What is Syslog? Syslog is a way for network devices to send event messages to a logging server \u2013 usually known as a Syslog server. The Syslog protocol is supported by a wide range of devices and can be used to log different types of events. For example, a router might send messages about users logging on to console sessions, while a web-server might log access-denied events. https://www.networkmanagementsoftware.com/what-is-syslog/ The Syslog Logger can be a great development tool, particular for Mobile Developers which may be running test builds on devices while disconnected from Visual Studio and the Debug Console. This can be very easily achieved on Windows by installing any one of a number of Syslog Servers, where this will enabled you as a developer to get a stream of log data directly to your desktop separate from Visual Studio. Note The Syslog Logger is built on top of the Socket Messenger in the Prism.Plugin.Logging.Common NuGet package. All Syslog messages use the Udp Protocol with a max buffer size of 65500. Setup \u00b6 Logging Syslog messages is quite easy and simple but requires a few properties to be set. You must set both the Port and AppNameOrTag properties for the Syslog Logger to know where to send the log message and which tag to use to help you filter logs. public interface ISyslogOptions { string HostNameOrIp { get ; } int? Port { get ; } string AppNameOrTag { get ; } } Note If no Port is specified the default Syslog port 514 will be used. See Also \u00b6 Socket Logger Free Desktop Syslog Servers","title":"Syslog"},{"location":"syslog/#syslog","text":"What is Syslog? Syslog is a way for network devices to send event messages to a logging server \u2013 usually known as a Syslog server. The Syslog protocol is supported by a wide range of devices and can be used to log different types of events. For example, a router might send messages about users logging on to console sessions, while a web-server might log access-denied events. https://www.networkmanagementsoftware.com/what-is-syslog/ The Syslog Logger can be a great development tool, particular for Mobile Developers which may be running test builds on devices while disconnected from Visual Studio and the Debug Console. This can be very easily achieved on Windows by installing any one of a number of Syslog Servers, where this will enabled you as a developer to get a stream of log data directly to your desktop separate from Visual Studio. Note The Syslog Logger is built on top of the Socket Messenger in the Prism.Plugin.Logging.Common NuGet package. All Syslog messages use the Udp Protocol with a max buffer size of 65500.","title":"Syslog"},{"location":"syslog/#setup","text":"Logging Syslog messages is quite easy and simple but requires a few properties to be set. You must set both the Port and AppNameOrTag properties for the Syslog Logger to know where to send the log message and which tag to use to help you filter logs. public interface ISyslogOptions { string HostNameOrIp { get ; } int? Port { get ; } string AppNameOrTag { get ; } } Note If no Port is specified the default Syslog port 514 will be used.","title":"Setup"},{"location":"syslog/#see-also","text":"Socket Logger Free Desktop Syslog Servers","title":"See Also"}]}